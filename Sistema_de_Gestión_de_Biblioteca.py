""" class Libro:
    def __init__(self, titulo, autor, isbn, disponible=True):
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.disponible

    def __str__(self):
        return f"{self.titulo} - {self.autor} - {self.isbn} - {self.disponible} "
    
    def agregar(self):
        pass

    def prestar(self):
        self.disponible = False

    def devolver(self):
        self.disponible = True

    def mostrar(self):
        pass


class Biblioteca:
    def __init__(self):
        self.libros = []

    def agregar(self, libro):
        self.libros.append(libro)

    def mostrar(self):
        for libro in self.libros:
            print(libro)

    def buscar(self, titulo):
        for libro in self.libros:
            if libro.titulo == titulo:
                return libro
        return None

    def prestar(self, titulo):
        libro = self.buscar(titulo)
        if libro is not None:
            libro.prestar()
        else:
            print("Libro no encontrado")

    def devolver(self, titulo):
        libro = self.buscar(titulo)
        if libro is not None:
            libro.devolver()
        else:
            print("Libro no encontrado")
    
    def mostrar_disponibles(self):
        for libro in self.libros:
            if libro.disponible:
                print(libro)

    def bienvenida(self):
        print("Bienvenido a la Biblioteca")
        print("1. Agregar libro")
        print("4. Prestar libro")
        print("5. Devolver libro")
        print("2. Mostrar libros")
        print("3. Buscar")
        print("7. Salir")
        opcion = input("Opci√≥n: ")
        if opcion == "1":
            self.agregar()
        elif opcion == "2":
            self.mostrar()
        elif opcion == "3":
            self.buscar()
        elif opcion == "4":
            self.prestar()
        elif opcion == "5":
            self.devolver()
        elif opcion == "6":
            self.mostrar_disponibles()
        elif opcion == "7":
            print("Gracias por usar la Biblioteca")
            exit()

biblioteca = Biblioteca()
biblioteca.bienvenida()



 """
"""
La siguiente pr√°ctica simula una tarea que nuestro jefe de proyecto nos ha
encargado. Se debe seguir al pie de la letra las exigencias del enunciado.
Enunciado de la pr√°ctica
T√≠tulo: Sistema de Gesti√≥n de Biblioteca
Descripci√≥n: Eres el desarrollador de un sistema b√°sico de gesti√≥n para una
biblioteca. Debes crear un programa en Python que permita registrar libros y
gestionar pr√©stamos a usuarios. El programa debe cumplir con los siguientes
requisitos:
1. Clase Libro:
‚Ä¢ Crea una clase Libro con los
atributos titulo (str), autor (str), isbn (str) y disponible (bool,
inicialmente True).
‚Ä¢ Incluye un m√©todo agregar() que permita introducir un nuevo libro
con sus caracter√≠sticas.
‚Ä¢ Incluye un m√©todo prestar() que cambie el estado de disponible a
False si el libro est√° disponible, y muestre un mensaje si ya est√°
prestado.
‚Ä¢ Incluye un m√©todo devolver() que cambie el estado de disponible a
True si estaba prestado, y muestre un mensaje si ya estaba
disponible.
‚Ä¢ Incluye un m√©todo mostrar() que devuelva una lista con todos los
libros de la biblioteca y los muestre en pantalla con todos sus datos
y diga si est√°s disponible o no.
‚Ä¢ Incluye un m√©todo buscar() que busque un libro en concreto por su
ISBM y lo muestre en pantalla con todos sus datos y diga si est√°
disponible o no.
2. Gesti√≥n del inventario:
‚Ä¢ Usa una lista para almacenar objetos de la clase Libro.
‚Ä¢ Implementa un bucle que permita al usuario interactuar con el
programa mediante un men√∫ con las siguientes opciones:
‚Ä¢ a) Agregar un nuevo libro ingresando t√≠tulo, autor e ISBN.
‚Ä¢ b) Prestar un libro buscando por ISBN.
‚Ä¢ c) Devolver un libro buscando por ISBN.
‚Ä¢ d) Mostrar todos los libros y su estado (disponible o no).
‚Ä¢ e) Salir del programa.
3. Condiciones:
‚Ä¢ Valida que el ISBN ingresado exista en la lista antes de prestar o
devolver un libro.
‚Ä¢ Si el usuario ingresa una opci√≥n inv√°lida en el men√∫, muestra un
mensaje de error y vuelve a pedir una opci√≥n.
Entregable:
‚Ä¢ Un script en Python que implemente todas las funcionalidades descritas.
‚Ä¢ El c√≥digo debe ser claro, con comentarios explicativos y usando buenas
pr√°cticas.
Ejemplo de uso. Al ejecutar el programa el resultado deber√≠a ser como se ve
en el siguiente ejemplo:
Bienvenido al Sistema de Gesti√≥n de Biblioteca
1. Agregar libro
2. Prestar libro
3. Devolver libro
4. Mostrar libros
5. Buscar
6. Salir
Elige una opci√≥n: 1
T√≠tulo: El Quijote
Autor: Cervantes
ISBN: 12345
Libro agregado con √©xito.
Elige una opci√≥n: 4
- El Quijote (Cervantes) - ISBN: 12345 - Disponible: S√≠
Elige una opci√≥n: 2
Ingresa el ISBN: 12345
Libro prestado con √©xito.
Elige una opci√≥n: 4
- El Quijote (Cervantes) - ISBN: 12345 - Disponible: No
Consideraciones a tener en cuenta:
Se crear√° la clase:
‚Ä¢ Libro
Con los atributos:
‚Ä¢ Titulo
‚Ä¢ Autor
‚Ä¢ isbn
‚Ä¢ disponible
Se crear√°n los m√©todos:
‚Ä¢ agregar
‚Ä¢ prestar
‚Ä¢ devolver
‚Ä¢ Mostrar
‚Ä¢ buscar
El ejercicio se entregar√° en un solo archivo con extensi√≥n .py
El nombre de la clase, atributos y m√©todos ser√° exactamente el que se pide en el
enunciado.
Solo se admitir√° una sola subida por alumno. En el caso de que un alumno suba
m√°s de una versi√≥n del ejercicio, solo se calificar√° la primera que se subiese,
ignorando el sistema las dem√°s. Por lo que se recomienda encarecidamente que
se revisen detalladamente los ejercicios antes de proceder a su entrega.
Cualquier ejercicio que no cumpla escrupulosamente los requisitos pedidos NO
SER√Å CORREGIDO.
Todo aquel ejercicio que sea entregado posteriormente a las 00:00 horas del d√≠a
dd/mm/yyyy no ser√° corregido por el sistema.
"""
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
MAGENTA = "\033[95m"
CYAN = "\033[96m"
WHITE = "\033[97m"
RESET = "\033[0m"


class Libro:
    def __init__(self, titulo, autor, isbn, disponible=True):
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.disponible = disponible

    def __str__(self):
        return f"- {self.titulo} - {self.autor} - ISBN: {self.isbn} - Disponible: {'S√≠' if self.disponible else 'No'}"

    def agregar(self, biblioteca):
        titulo = input("T√≠tulo: ")
        autor = input("Autor: ")
        isbn = get_valid_isbn()
        libro = Libro(titulo, autor, isbn)
        biblioteca.append(libro)
        print(f"{GREEN}Libro agregado con √©xito. {RESET} ü•≥")

    def prestar(self):
        if self.disponible:
            self.disponible = False
            print(f"{GREEN}Libro prestado con √©xito. {RESET} üìö")
        else:
            print(f"{RED} El libro ya est√° prestado. {RESET} üò±")

    def devolver(self):
        if not self.disponible:
            self.disponible = True
            print(f"{GREEN} Libro devuelto con √©xito.{RESET} ¬†¬†ü§ì ")
        else:
            print(f"{RED} El libro ya se ha devuelto. {RESET} üò±")

    @staticmethod
    def mostrar(biblioteca):
        if not biblioteca:
            print(f"{BLUE} No hay libros en la biblioteca. {RESET} üò¢")
        else:
            for libro in biblioteca:
                print(libro)

    @staticmethod
    def buscar(biblioteca, isbn):
        for libro in biblioteca:
            if libro.isbn == isbn:
                print(libro)
                return libro
        print("Libro no encontrado.")
        return None


def get_valid_isbn():
    while True:
        isbn = input(f"{YELLOW}Ingresa el ISBN: {RESET}")
        try:
            isbn_int = int(isbn)
            return str(isbn_int)
        except ValueError:
            print(f"{RED}El ISBN debe ser un n√∫mero entero.{RESET} üò°")


def gestionar_biblioteca():
    biblioteca = [
        Libro("El Quijote", "Miguel de Cervantes", "12345"),
        Libro("Cien A√±os de Soledad", "Gabriel Garc√≠a M√°rquez", "67890"),
        Libro("1984", "George Orwell", "11223"),
        Libro("El Se√±or de los Anillos", "J.R.R. Tolkien", "44556"),
        Libro("Harry Potter y la Piedra Filosofal", "J.K. Rowling", "77889"),
    ]
    while True:
        print(f"\n{CYAN} Bienvenido al Sistema de Gesti√≥n de Biblioteca {RESET}")
        print(f"{CYAN} 1. {YELLOW} Agregar libro {RESET}")
        print(f"{CYAN} 2. {YELLOW} Prestar libro {RESET}")
        print(f"{CYAN} 3. {YELLOW} Devolver libro {RESET}")
        print(f"{CYAN} 4. {YELLOW} Mostrar libros {RESET}")
        print(f"{CYAN} 5. {YELLOW} Buscar libro por ISBN{RESET}")
        print(f"{CYAN} 6. {YELLOW} Salir {RESET}")
        opcion = input(f"{CYAN} Elige una opci√≥n: {RESET} ")

        if opcion == "1":
            Libro.agregar(Libro, biblioteca)
        elif opcion == "2":
            isbn = get_valid_isbn()
            libro = Libro.buscar(biblioteca, isbn)
            if libro:
                libro.prestar()
        elif opcion == "3":
            isbn = get_valid_isbn()
            libro = Libro.buscar(biblioteca, isbn)
            if libro:
                libro.devolver()
        elif opcion == "4":
            Libro.mostrar(biblioteca)
        elif opcion == "5":
            isbn = input(f"{YELLOW}Ingresa el ISBN: {RESET} ")
            Libro.buscar(biblioteca, isbn)
        elif opcion == "6":
            print(f"{BLUE} Gracias por usar el Sistema de Gesti√≥n de Biblioteca {RESET} üòä")
            break
        else:
            print(f"{RED}Opci√≥n inv√°lida. Por favor, elige una opci√≥n v√°lida. {RESET} üò°")


gestionar_biblioteca()